"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const deployment_status_1 = __importDefault(require("./deployment-status"));
const query_string_1 = require("./utils/query-string");
function createDeployment(metadata, files, options, debug) {
    return __asyncGenerator(this, arguments, function* createDeployment_1() {
        const preparedFiles = utils_1.prepareFiles(files, options);
        let apiDeployments = metadata.version === 2 ? utils_1.API_DEPLOYMENTS : utils_1.API_DEPLOYMENTS_LEGACY;
        debug('Sending deployment creation API request');
        try {
            const dpl = yield __await(utils_1.fetch(`${apiDeployments}${query_string_1.generateQueryString(options)}`, options.token, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${options.token}`,
                },
                body: JSON.stringify(Object.assign({}, metadata, { files: preparedFiles })),
            }));
            const json = yield __await(dpl.json());
            debug('Deployment response:', JSON.stringify(json));
            if (!dpl.ok || json.error) {
                debug('Error: Deployment request status is', dpl.status);
                // Return error object
                return yield __await(yield yield __await({
                    type: 'error',
                    payload: json.error
                        ? Object.assign({}, json.error, { status: dpl.status }) : Object.assign({}, json, { status: dpl.status }),
                }));
            }
            for (const [name, value] of dpl.headers.entries()) {
                if (name.startsWith('x-now-warning-')) {
                    debug('Deployment created with a warning:', value);
                    yield yield __await({ type: 'warning', payload: value });
                }
                if (name.startsWith('x-now-notice-')) {
                    debug('Deployment created with a notice:', value);
                    yield yield __await({ type: 'notice', payload: value });
                }
            }
            yield yield __await({ type: 'created', payload: json });
        }
        catch (e) {
            return yield __await(yield yield __await({ type: 'error', payload: e }));
        }
    });
}
const getDefaultName = (path, isDirectory, files, debug) => {
    if (isDirectory && typeof path === 'string') {
        debug('Provided path is a directory. Using last segment as default name');
        const segments = path.split('/');
        return segments[segments.length - 1];
    }
    else {
        debug('Provided path is not a directory. Using last segment of the first file as default name');
        const filePath = Array.from(files.values())[0].names[0];
        const segments = filePath.split('/');
        return segments[segments.length - 1];
    }
};
function deploy(files, options) {
    return __asyncGenerator(this, arguments, function* deploy_1() {
        var e_1, _a, e_2, _b;
        const debug = utils_1.createDebug(options.debug);
        const nowJsonMetadata = options.nowConfig || {};
        delete nowJsonMetadata.github;
        delete nowJsonMetadata.scope;
        const meta = options.metadata || {};
        const metadata = Object.assign({}, nowJsonMetadata, meta);
        // Check if we should default to a static deployment
        if (!metadata.version && !metadata.name) {
            metadata.version = 2;
            metadata.name =
                options.totalFiles === 1
                    ? 'file'
                    : getDefaultName(options.path, options.isDirectory, files, debug);
            if (metadata.name === 'file') {
                debug('Setting deployment name to "file" for single-file deployment');
            }
        }
        if (options.totalFiles === 1 && !metadata.builds && !metadata.routes) {
            debug(`Assigning '/' route for single file deployment`);
            const filePath = Array.from(files.values())[0].names[0];
            const segments = filePath.split('/');
            metadata.routes = [
                {
                    src: '/',
                    dest: `/${segments[segments.length - 1]}`,
                },
            ];
        }
        if (!metadata.name) {
            metadata.name =
                options.defaultName ||
                    getDefaultName(options.path, options.isDirectory, files, debug);
            debug('No name provided. Defaulting to', metadata.name);
        }
        if (metadata.version === 1 && !metadata.deploymentType) {
            debug(`Setting 'type' for 1.0 deployment to '${nowJsonMetadata.type}'`);
            metadata.deploymentType = nowJsonMetadata.type;
        }
        if (metadata.version === 1) {
            debug(`Writing 'config' values for 1.0 deployment`);
            const nowConfig = Object.assign({}, nowJsonMetadata);
            delete nowConfig.version;
            metadata.config = Object.assign({}, nowConfig, metadata.config);
        }
        let deployment;
        try {
            debug('Creating deployment');
            try {
                for (var _c = __asyncValues(createDeployment(metadata, files, options, debug)), _d; _d = yield __await(_c.next()), !_d.done;) {
                    const event = _d.value;
                    if (event.type === 'created') {
                        debug('Deployment created');
                        deployment = event.payload;
                    }
                    yield yield __await(event);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) yield __await(_a.call(_c));
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        catch (e) {
            debug('An unexpected error occurred when creating the deployment');
            return yield __await(yield yield __await({ type: 'error', payload: e }));
        }
        if (deployment) {
            if (deployment.readyState === 'READY') {
                debug('Deployment is READY. Not performing additional polling');
                return yield __await(yield yield __await({ type: 'ready', payload: deployment }));
            }
            try {
                debug('Waiting for deployment to be ready...');
                try {
                    for (var _e = __asyncValues(deployment_status_1.default(deployment, options.token, metadata.version, options.teamId, debug)), _f; _f = yield __await(_e.next()), !_f.done;) {
                        const event = _f.value;
                        yield yield __await(event);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) yield __await(_b.call(_e));
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            catch (e) {
                debug('An unexpected error occurred while waiting for deployment to be ready');
                return yield __await(yield yield __await({ type: 'error', payload: e }));
            }
        }
    });
}
exports.default = deploy;
