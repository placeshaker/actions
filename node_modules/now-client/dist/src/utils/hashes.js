"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const fs_extra_1 = __importDefault(require("fs-extra"));
const async_sema_1 = require("async-sema");
/**
 * Computes a hash for the given buf.
 *
 * @param {Buffer} file data
 * @return {String} hex digest
 */
function hash(buf) {
    return crypto_1.createHash('sha1')
        .update(buf)
        .digest('hex');
}
/**
 * Transforms map to object
 * @param map with hashed files
 * @return {object}
 */
exports.mapToObject = (map) => {
    const obj = {};
    for (const [key, value] of map) {
        obj[key] = value;
    }
    return obj;
};
/**
 * Computes hashes for the contents of each file given.
 *
 * @param {Array} of {String} full paths
 * @return {Map}
 */
function hashes(files) {
    return __awaiter(this, void 0, void 0, function* () {
        const map = new Map();
        const semaphore = new async_sema_1.Sema(100);
        yield Promise.all(files.map((name) => __awaiter(this, void 0, void 0, function* () {
            yield semaphore.acquire();
            const data = yield fs_extra_1.default.readFile(name);
            const h = hash(data);
            const entry = map.get(h);
            if (entry) {
                entry.names.push(name);
            }
            else {
                map.set(h, { names: [name], data });
            }
            semaphore.release();
        })));
        return map;
    });
}
exports.default = hashes;
